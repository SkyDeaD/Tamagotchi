import asyncio
import json
import os
import random
import re
import time
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
from data.debates import DEBATES
from data.cities import CITIES
from data.pet_phrases import PET_PHRASES

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "pets_data.json"
DEBATES_FILE = "debates.json"
CITIES_GAME_FILE = "cities_game_data.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ JSON —Ñ–∞–π–ª"""
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞
def load_cities_game_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if os.path.exists(CITIES_GAME_FILE):
        try:
            with open(CITIES_GAME_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞
def save_cities_game_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞ –≤ JSON —Ñ–∞–π–ª"""
    with open(CITIES_GAME_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
def normalize_city_name(city):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (—É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)"""
    normalized = re.sub(r'[^\w\s-]', '', city.strip().lower())
    normalized = normalized.replace('—ë', '–µ')
    return normalized

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤—ã –¥–ª—è –∏–≥—Ä—ã
def get_last_letter(city):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∏–≥—Ä—ã (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è)"""
    city = city.strip().lower().replace('—ë', '–µ')
    if not city:
        return None
    excluded_letters = {'—å', '—ä', '—ã'}
    for i in range(len(city) - 1, -1, -1):
        letter = city[i]
        if letter.isalpha() and letter not in excluded_letters:
            return letter
    return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã –≥–æ—Ä–æ–¥–∞
def get_first_letter(city):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –≥–æ—Ä–æ–¥–∞"""
    city = city.strip().lower().replace('—ë', '–µ')
    if city and city[0].isalpha():
        return city[0]
    return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ –≤ —Å–ø–∏—Å–∫–µ
def is_valid_city(city, cities_list):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥ –≤ —Å–ø–∏—Å–∫–µ"""
    normalized_input = normalize_city_name(city)
    for valid_city in cities_list:
        if normalize_city_name(valid_city) == normalized_input:
            return True, valid_city
    return False, None

# –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –±—É–∫–≤—É
def find_city_starting_with(letter, cities_list, used_cities):
    """–ù–∞—Ö–æ–¥–∏—Ç –≥–æ—Ä–æ–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –±—É–∫–≤—É"""
    available_cities = []
    for city in cities_list:
        if (get_first_letter(city) == letter and
                normalize_city_name(city) not in used_cities):
            available_cities.append(city)
    if available_cities:
        return random.choice(available_cities)
    return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞
def start_cities_game(user_id):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ –≥–æ—Ä–æ–¥–∞"""
    first_city = random.choice(CITIES)
    game_data = {
        str(user_id): {
            'active': True,
            'cities_used': [normalize_city_name(first_city)],
            'last_city': first_city,
            'last_letter': get_last_letter(first_city),
            'score': 0,
            'start_time': time.time()
        }
    }
    cities_game_data = load_cities_game_data()
    cities_game_data.update(game_data)
    save_cities_game_data(cities_game_data)
    return True, first_city

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
def process_player_move(user_id, city):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä–µ –≥–æ—Ä–æ–¥–æ–≤"""
    cities_game_data = load_cities_game_data()
    if str(user_id) not in cities_game_data or not cities_game_data[str(user_id)]['active']:
        return False, "–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!"
    game = cities_game_data[str(user_id)]
    is_valid, correct_city_name = is_valid_city(city, CITIES)
    if not is_valid:
        return False, f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ!"
    normalized_city = normalize_city_name(correct_city_name)
    if normalized_city in game['cities_used']:
        return False, f"–ì–æ—Ä–æ–¥ '{correct_city_name}' —É–∂–µ –±—ã–ª –Ω–∞–∑–≤–∞–Ω!"
    required_letter = game['last_letter']
    first_letter = get_first_letter(correct_city_name)
    if first_letter != required_letter:
        return False, f"–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –±—É–∫–≤—É '{required_letter.upper()}'!"
    game['cities_used'].append(normalized_city)
    game['last_city'] = correct_city_name
    game['last_letter'] = get_last_letter(correct_city_name)
    game['score'] += 1
    bot_city = find_city_starting_with(game['last_letter'], CITIES, game['cities_used'])
    if bot_city:
        game['cities_used'].append(normalize_city_name(bot_city))
        game['last_city'] = bot_city
        game['last_letter'] = get_last_letter(bot_city)
        save_cities_game_data(cities_game_data)
        return True, {
            'player_city': correct_city_name,
            'bot_city': bot_city,
            'next_letter': game['last_letter'],
            'score': game['score']
        }
    else:
        game_time = time.time() - game['start_time']
        final_score = game['score']
        game['active'] = False
        save_cities_game_data(cities_game_data)
        return True, {
            'player_city': correct_city_name,
            'game_won': True,
            'final_score': final_score,
            'game_time': game_time
        }

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
def end_cities_game(user_id):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –≤ –≥–æ—Ä–æ–¥–∞"""
    cities_game_data = load_cities_game_data()
    if str(user_id) not in cities_game_data:
        return False, 0, 0
    game = cities_game_data[str(user_id)]
    if not game['active']:
        return False, 0, 0
    game_time = time.time() - game['start_time']
    final_score = game['score']
    game['active'] = False
    save_cities_game_data(cities_game_data)
    return True, final_score, game_time

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
def is_cities_game_active(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞ –≤ –≥–æ—Ä–æ–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cities_game_data = load_cities_game_data()
    return (str(user_id) in cities_game_data and
            cities_game_data[str(user_id)].get('active', False))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
pets_data = load_data()

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="üó£Ô∏è –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")],
            [KeyboardButton(text="üèôÔ∏è –ò–≥—Ä–∞—Ç—å –≤ –≥–æ—Ä–æ–¥–∞"), KeyboardButton(text="ü§î –§–∏–ª–æ—Å–æ–≤—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã")],
            [KeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞
def get_cities_game_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üö™ –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–∏—Ç–æ–º—Ü–∞
def get_pet_type_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üê± –ö–æ—Ç–∏–∫", callback_data="type_cat")],
            [InlineKeyboardButton(text="üê∂ –°–æ–±–∞—á–∫–∞", callback_data="type_dog")],
            [InlineKeyboardButton(text="ü¶ú –ü–æ–ø—É–≥", callback_data="type_parrot")]
        ]
    )
    return keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–∏—Ç–æ–º—Ü–µ–º
def get_actions_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üçñ –ü–æ–∫–æ—Ä–º–∏—Ç—å", callback_data="action_feed")],
            [InlineKeyboardButton(text="üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å", callback_data="action_play")],
            [InlineKeyboardButton(text="üí§ –°–ø–∞—Ç—å", callback_data="action_sleep")]
        ]
    )
    return keyboard

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–∏—Ç–æ–º—Ü–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
def update_pet_stats(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if str(user_id) not in pets_data:
        return
    pet = pets_data[str(user_id)]
    now = datetime.now()
    last_update = datetime.fromisoformat(pet['last_update'])
    hours_passed = (now - last_update).total_seconds() / 3600
    decrease = int(hours_passed * 2)
    if decrease > 0:
        pet['hunger'] = max(0, pet['hunger'] - decrease)
        pet['mood'] = max(0, pet['mood'] - decrease)
        pet['energy'] = max(0, pet['energy'] - decrease)
        pet['last_update'] = now.isoformat()
        save_data(pets_data)

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
def create_pet(user_id, name, pet_type):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    pets_data[str(user_id)] = {
        'name': name,
        'type': pet_type,
        'hunger': 100,
        'mood': 100,
        'energy': 100,
        'last_update': datetime.now().isoformat()
    }
    save_data(pets_data)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ç–æ–º—Ü–∞
def get_pet_status(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–∏—Ç–æ–º—Ü–∞"""
    if str(user_id) not in pets_data:
        return None
    update_pet_stats(user_id)
    pet = pets_data[str(user_id)]
    emoji_map = {'cat': 'üê±', 'dog': 'üê∂', 'parrot': 'ü¶ú'}
    pet_emoji = emoji_map.get(pet['type'], 'üê±')
    def make_bar(value):
        filled = '‚ñà' * (value // 10)
        empty = '‚ñë' * (10 - value // 10)
        return f"[{filled}{empty}] {value}%"
    status = f"{pet_emoji} {pet['name']}\n\n"
    status += f"üçñ –ì–æ–ª–æ–¥: {make_bar(pet['hunger'])}\n"
    status += f"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {make_bar(pet['mood'])}\n"
    status += f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {make_bar(pet['energy'])}\n\n"
    if pet['hunger'] < 20:
        status += "üò´ –Ø –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–µ–Ω!"
    elif pet['mood'] < 20:
        status += "üò¢ –ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ..."
    elif pet['energy'] < 20:
        status += "üò¥ –Ø –æ—á–µ–Ω—å —É—Å—Ç–∞–ª..."
    elif pet['hunger'] > 80 and pet['mood'] > 80 and pet['energy'] > 80:
        if pet['type'] == 'cat':
            status += "üòª –ú—è—É! –Ø —Å—á–∞—Å—Ç–ª–∏–≤!"
        elif pet['type'] == 'dog':
            status += "üêï –ì–∞–≤! –Ø –æ—á–µ–Ω—å —Ä–∞–¥!"
        else:
            status += "ü¶ú –ß–∏—Ä–∏–∫! –Ø –æ—á–µ–Ω—å —Å—á–∞—Å—Ç–ª–∏–≤!"
    else:
        status += "üòä –í—Å–µ —Ö–æ—Ä–æ—à–æ!"
    return status

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑—ã –ø–∏—Ç–æ–º—Ü–∞
def get_random_phrase(pet_type, action="talk"):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è —Ç–∏–ø–∞ –ø–∏—Ç–æ–º—Ü–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è"""
    if pet_type in PET_PHRASES and action in PET_PHRASES[pet_type]:
        phrases_list = PET_PHRASES[pet_type][action]
        if phrases_list:
            return random.choice(phrases_list)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è "—Ñ–∏–ª–æ—Å–æ–≤—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
def get_random_debate():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è '—Ñ–∏–ª–æ—Å–æ–≤—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤'"""
    return random.choice(DEBATES)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    if str(user_id) in pets_data:
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü!", reply_markup=get_keyboard())
        return
    await message.answer(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¢–∞–º–∞–≥–æ—á–∏!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞:",
        reply_markup=get_pet_type_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–∏—Ç–æ–º—Ü–∞
@dp.callback_query(F.data.startswith("type_"))
async def choose_pet_type(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if str(user_id) in pets_data:
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü!")
        return
    pet_type = callback.data.split("_")[1]
    type_names = {"cat": "–∫–æ—Ç–∏–∫–∞", "dog": "—Å–æ–±–∞—á–∫—É", "parrot": "–ø–æ–ø—É–≥–∞"}
    await callback.message.edit_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ {type_names[pet_type]} üéâ\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞:"
    )
    pets_data[f"temp_{user_id}"] = pet_type
    save_data(pets_data)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–∏—Ç–æ–º—Ü–µ–º
@dp.callback_query(F.data.startswith("action_"))
async def pet_action(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    action = callback.data.split("_")[1]
    if str(user_id) not in pets_data:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞!")
        return
    update_pet_stats(user_id)
    pet = pets_data[str(user_id)]
    emoji_map = {'cat': 'üê±', 'dog': 'üê∂', 'parrot': 'ü¶ú'}
    pet_emoji = emoji_map.get(pet['type'], 'üê±')
    if action == "feed":
        pet['hunger'] = min(100, pet['hunger'] + 30)
        pet['mood'] = min(100, pet['mood'] + 10)
        phrase = get_random_phrase(pet['type'], 'feed')
        response = f"{pet_emoji} {pet['name']}: {phrase}"
    elif action == "play":
        if pet['energy'] < 15:
            response = f"{pet_emoji} {pet['name']}: –Ø —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è –∏–≥—Ä... üò¥"
        else:
            pet['mood'] = min(100, pet['mood'] + 25)
            pet['energy'] = max(0, pet['energy'] - 15)
            pet['hunger'] = max(0, pet['hunger'] - 10)
            phrase = get_random_phrase(pet['type'], 'play')
            response = f"{pet_emoji} {pet['name']}: {phrase}"
    elif action == "sleep":
        pet['energy'] = min(100, pet['energy'] + 40)
        pet['mood'] = min(100, pet['mood'] + 5)
        pet['hunger'] = max(0, pet['hunger'] - 10)
        phrase = get_random_phrase(pet['type'], 'sleep')
        response = f"{pet_emoji} {pet['name']}: {phrase}"
    pet['last_update'] = datetime.now().isoformat()
    save_data(pets_data)
    await callback.answer()
    await callback.message.answer(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ø–∏—Ç–æ–º—Ü–µ–º"
@dp.message(F.text == "üó£Ô∏è –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
async def talk_to_pet(message: types.Message):
    user_id = message.from_user.id
    if str(user_id) not in pets_data:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    update_pet_stats(user_id)
    pet = pets_data[str(user_id)]
    emoji_map = {'cat': 'üê±', 'dog': 'üê∂', 'parrot': 'ü¶ú'}
    pet_emoji = emoji_map.get(pet['type'], 'üê±')
    if pet['energy'] < 10:
        response = f"{pet_emoji} {pet['name']}: –Ø —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤... üò¥"
        await message.answer(response)
        return
    if pet['hunger'] < 10:
        response = f"{pet_emoji} {pet['name']}: –Ø –≥–æ–ª–æ–¥–µ–Ω! üòñ"
        await message.answer(response)
        return
    pet['energy'] = max(0, pet['energy'] - 3)
    pet['mood'] = min(100, pet['mood'] + 5)
    pet['hunger'] = max(0, pet['hunger'] - 5)
    phrase = get_random_phrase(pet['type'], 'talk')
    emoji_map = {'cat': 'üê±', 'dog': 'üê∂', 'parrot': 'ü¶ú'}
    pet_emoji = emoji_map.get(pet['type'], 'üê±')
    pet['last_update'] = datetime.now().isoformat()
    save_data(pets_data)
    await message.answer(f"{pet_emoji} {pet['name']}: {phrase}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–§–∏–ª–æ—Å–æ–≤—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã"
@dp.message(F.text == "ü§î –§–∏–ª–æ—Å–æ–≤—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
async def absurd_debates(message: types.Message):
    user_id = message.from_user.id
    if str(user_id) not in pets_data:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    update_pet_stats(user_id)
    pet = pets_data[str(user_id)]
    emoji_map = {'cat': 'üê±', 'dog': 'üê∂', 'parrot': 'ü¶ú'}
    pet_emoji = emoji_map.get(pet['type'], 'üê±')
    if pet['energy'] < 10:
        response = f"{pet_emoji} {pet['name']}: –Ø —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤... üò¥"
        await message.answer(response)
        return
    if pet['hunger'] < 10:
        response = f"{pet_emoji} {pet['name']}: –Ø –≥–æ–ª–æ–¥–µ–Ω! üòñ"
        await message.answer(response)
        return
    pet['energy'] = max(0, pet['energy'] - 8)
    pet['mood'] = min(100, pet['mood'] + 12)
    pet['hunger'] = max(0, pet['hunger'] - 10)
    debate_question = get_random_debate()
    pet['last_update'] = datetime.now().isoformat()
    save_data(pets_data)
    await message.answer(
        f"{pet_emoji} {pet['name']} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–±—Å—É–¥–∏—Ç—å:\n\n"
        f"ü§î {debate_question}\n\n"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å –≤ –≥–æ—Ä–æ–¥–∞"
@dp.message(F.text == "üèôÔ∏è –ò–≥—Ä–∞—Ç—å –≤ –≥–æ—Ä–æ–¥–∞")
async def start_cities_game_handler(message: types.Message):
    user_id = message.from_user.id
    if str(user_id) not in pets_data:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    pet = pets_data[str(user_id)]
    emoji_map = {'cat': 'üê±', 'dog': 'üê∂', 'parrot': 'ü¶ú'}
    pet_emoji = emoji_map.get(pet['type'], 'üê±')
    if pet['energy'] < 10:
        response = f"{pet_emoji} {pet['name']}: –Ø —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è –∏–≥—Ä... üò¥"
        await message.answer(response)
        return
    if pet['hunger'] < 10:
        response = f"{pet_emoji} {pet['name']}: –Ø –≥–æ–ª–æ–¥–µ–Ω! üòñ"
        await message.answer(response)
        return
    if is_cities_game_active(user_id):
        await message.answer(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –≤ –≥–æ—Ä–æ–¥–∞! üèôÔ∏è\n"
            "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∏–ª–∏ –Ω–∞–∑–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥.",
            reply_markup=get_cities_game_keyboard()
        )
        return
    success, result = start_cities_game(user_id)
    if not success:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã: {result}")
        return
    await message.answer(
        f"üèôÔ∏è **–ò–≥—Ä–∞ –≤ –≥–æ—Ä–æ–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å!**\n\n"
        f"ü§ñ –Ø –Ω–∞—á–∏–Ω–∞—é: **{result}**\n\n"
        f"üéØ –í–∞—à —Ö–æ–¥! –ù–∞–∑–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É **'{get_last_letter(result).upper()}'**\n\n"
        f"üìã **–ü—Ä–∞–≤–∏–ª–∞:**\n"
        f"‚Ä¢ –ì–æ—Ä–æ–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è\n"
        f"‚Ä¢ –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –¨, –™, –´ - –±–µ—Ä—ë–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –±—É–∫–≤—É\n"
        f"‚Ä¢ –ï –∏ –Å —Å—á–∏—Ç–∞—é—Ç—Å—è –æ–¥–Ω–æ–π –±—É–∫–≤–æ–π\n\n"
        f"–£–¥–∞—á–∏! üçÄ",
        reply_markup=get_cities_game_keyboard(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞
@dp.message(F.text == "üö™ –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É")
async def end_cities_game_handler(message: types.Message):
    user_id = message.from_user.id
    if not is_cities_game_active(user_id):
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞! ü§∑‚Äç‚ôÇÔ∏è",
            reply_markup=get_keyboard()
        )
        return
    success, score, game_time = end_cities_game(user_id)
    if success:
        minutes = int(game_time // 60)
        seconds = int(game_time % 60)
        await message.answer(
            f"üèÅ **–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"üèÜ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: **{score}**\n"
            f"‚è± –í—Ä–µ–º—è –∏–≥—Ä—ã: **{minutes}–º {seconds}—Å**\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üòä",
            reply_markup=get_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã.",
            reply_markup=get_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç—É—Å"
@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
async def show_status(message: types.Message):
    user_id = message.from_user.id
    if str(user_id) not in pets_data:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    status = get_pet_status(user_id)
    await message.answer(status, reply_markup=get_actions_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü"
@dp.message(F.text == "üîÑ –ù–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü")
async def new_pet(message: types.Message):
    user_id = message.from_user.id
    if str(user_id) in pets_data:
        del pets_data[str(user_id)]
        save_data(pets_data)
    await message.answer(
        "–°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞! üéâ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞:",
        reply_markup=get_pet_type_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
@dp.message(F.text)
async def handle_text_messages(message: types.Message):
    user_id = message.from_user.id
    text = message.text
    if is_cities_game_active(user_id):
        success, result = process_player_move(user_id, text)
        if not success:
            await message.answer(
                f"‚ùå {result}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
                reply_markup=get_cities_game_keyboard()
            )
            return
        if isinstance(result, dict):
            if result.get('game_won'):
                minutes = int(result['game_time'] // 60)
                seconds = int(result['game_time'] % 60)
                await message.answer(
                    f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!**\n\n"
                    f"‚úÖ –í–∞—à –≥–æ—Ä–æ–¥: **{result['player_city']}**\n"
                    f"ü§ñ –Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –Ω–∞ —ç—Ç—É –±—É–∫–≤—É!\n\n"
                    f"üìä **–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                    f"üèÜ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: **{result['final_score']}**\n"
                    f"‚è± –í—Ä–µ–º—è –∏–≥—Ä—ã: **{minutes}–º {seconds}—Å**\n\n"
                    f"–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞! ü•≥",
                    reply_markup=get_keyboard(),
                    parse_mode="Markdown"
                )
            else:
                await message.answer(
                    f"‚úÖ **{result['player_city']}** - –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                    f"ü§ñ –ú–æ–π —Ö–æ–¥: **{result['bot_city']}**\n\n"
                    f"üéØ –í–∞—à —Ö–æ–¥! –ù–∞–∑–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É **'{result['next_letter'].upper()}'**\n\n"
                    f"üìä –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: **{result['score']}**",
                    reply_markup=get_cities_game_keyboard(),
                    parse_mode="Markdown"
                )
        return
    temp_key = f"temp_{user_id}"
    if temp_key in pets_data:
        pet_type = pets_data[temp_key]
        del pets_data[temp_key]
        if len(text) > 15:
            await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        if not text.strip():
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏–º—è!")
            return
        create_pet(user_id, text.strip(), pet_type)
        type_names = {"cat": "–∫–æ—Ç–∏–∫", "dog": "—Å–æ–±–∞—á–∫–∞", "parrot": "–ø–æ–ø—É–≥"}
        emoji_map = {"cat": "üê±", "dog": "üê∂", "parrot": "ü¶ú"}
        await message.answer(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í–∞—à {type_names[pet_type]} {emoji_map[pet_type]} {text} —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: 100% ‚ú®\n\n"
            f"üí° –°–æ–≤–µ—Ç: –†–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤–ª–∏—è—é—Ç –Ω–∞ —Å—Ç–∞—Ç—ã:\n"
            f"üçñ –ö–æ—Ä–º–ª–µ–Ω–∏–µ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–æ–ª–æ–¥\n"
            f"üéÆ –ò–≥—Ä–∞ - –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –Ω–æ —Ç—Ä–∞—Ç–∏—Ç —ç–Ω–µ—Ä–≥–∏—é\n"
            f"üí§ –°–æ–Ω - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é\n"
            f"üó£Ô∏è –û–±—â–µ–Ω–∏–µ –∏ '—Ñ–∏–æ–ª–æ—Å–æ–≤—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã' —Ç–æ–∂–µ –≤–ª–∏—è—é—Ç –Ω–∞ –ø–∏—Ç–æ–º—Ü–∞!",
            reply_markup=get_keyboard()
        )
    else:
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é ü§î\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {DATA_FILE}")
    print(f"üéÆ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {CITIES_GAME_FILE}")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())